# This template is meant to be used once per team, per account.
# It sets up a load balancer to be used by multiple apps

# Note that the cluster is not included, since teams should only use
# one cluster to run multiple apps / services.

---
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  TeamPrefix:
    Type: String
    Description: |
      A unique prefix for all ECS services used by your team. All subsequent
      resources you create should use this prefix if you want to be able to operate them.
  AppName:
    Type: String
    Default: ""
    Description: |
      Name of the app associated with the load balancer. Only required when the load balancer is
      used by a single application.
  ApplicationPort:
    Type: String
    Default: 8080
    Description: Health check port used by the Target group
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Type: AWS::EC2::VPC::Id
  SecurityGroups:
    Type: CommaDelimitedList
    Default: ''
  LogsBucketName:
    Type: String
    Description: Name of S3 bucket where logs for the service can be written to
    Default: ""
  ListenerPort:
    Type: Number
    Description: Port the load balancer should listen on for your app
    Default: 80

Conditions:
  AppNameExists: !Not [!Equals [!Ref AppName, ""]]
  LogsBucketNameExists: !Not [!Equals [!Ref LogsBucketName, ""]]

Resources:
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !If
        - AppNameExists
        - !Sub "${TeamPrefix}-${AppName}-tg"
        - !Sub "${TeamPrefix}-tg"
      Port: 5000
      Protocol: "HTTP"
      VpcId: !Ref VpcId
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/"
      HealthCheckPort: !Ref ApplicationPort
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
      TargetType: ip
      Matcher:
        HttpCode: 200-299

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: !If
        - AppNameExists
        - !Sub "${TeamPrefix}-${AppName}"
        - !Ref TeamPrefix
      Scheme: internal
      SecurityGroups: !Ref SecurityGroups
      Subnets: !Ref SubnetIds
      LoadBalancerAttributes: !If
        - LogsBucketNameExists
        - -
            Key: access_logs.s3.enabled
            Value: true
          -
            Key: access_logs.s3.bucket
            Value: !Ref LogsBucketName
          -
            Key: access_logs.s3.prefix
            Value: !If
              - AppNameExists
              - !Sub "${TeamPrefix}-${AppName}"
              - !Ref TeamPrefix
        - !Ref "AWS::NoValue"

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref ListenerPort
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

Outputs:
  Arn:
    Description: ARN of the ALB
    Value: !Ref LoadBalancer
  DnsName:
    Description: The DNSName of the ALB
    Value: !GetAtt LoadBalancer.DNSName
  ZoneId:
    Description: The zone id of the ALB
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
  ListenerArn:
    Description: ARN of the ALB listener
    Value: !Ref LoadBalancerListener
  ListenerPort:
    Description: Port of the ALB listener
    Value: !Ref ListenerPort
  VpcId:
    Description: The id of the VPC where the load balancer resides
    Value: !Ref VpcId
  Subnets:
    Description: The ids of the subnets in which to run the ECS tasks
    Value: !Join [',', !Ref SubnetIds]
  FullName:
    Description: The full name of the load balancer (last portion of the arn)
    Value: !GetAtt LoadBalancer.LoadBalancerFullName
